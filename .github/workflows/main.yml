name: Deploy App
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Run comprehensive tests before deployment
  test:
    name: Comprehensive Tests
    uses: ./.github/workflows/tests.yml
    secrets: inherit

  setup_go:
    name: setup go
    runs-on: ubuntu-latest
    needs: test  # Only deploy if tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go environment
        uses: actions/setup-go@v5.0.0
        with:
          go-version-file: "go.mod"

      - name: Install dependencies
        run: go mod download
      - name: Build
        run: |
          GOOS=linux GOARCH=amd64 go build -o medicaments-api .
          ls -la medicaments-api  # Verify binary exists and show size
          file medicaments-api    # Show file type to confirm it's executable
        
      - name: install ssh keys
        # check this thread to understand why its needed:
        # https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"
          
      - name: Verify target directory exists
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.REPO_DIR }} && ls -la ${{ secrets.REPO_DIR }}"


      - name: Stop the service waiting for it's correct shutdown
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "=== Initiating graceful shutdown ==="
            
            # Check if service exists and is running
            if sudo systemctl is-active --quiet medicaments-api; then
              echo "Service is running, initiating graceful stop..."
              
              # Send graceful stop signal
              sudo systemctl stop medicaments-api
              
              # Wait for graceful shutdown (max 40 seconds - your timeout is 30s + buffer)
              echo "Waiting for graceful shutdown to complete..."
              for i in {1..40}; do
                if ! sudo systemctl is-active --quiet medicaments-api; then
                  echo "Service stopped gracefully after ${i} seconds"
                  break
                fi
                echo "Still shutting down... (${i}/40)"
                sleep 1
              done
              
              # Force stop if still running (shouldn't happen with proper graceful shutdown)
              if sudo systemctl is-active --quiet medicaments-api; then
                echo "WARNING: Graceful shutdown timed out, forcing stop..."
                sudo systemctl kill medicaments-api
                sleep 2
                
                # Check if process is actually gone using pgrep instead of systemctl
                if pgrep -f medicaments-api > /dev/null; then
                  echo "ERROR: Processes still running after force kill, cleaning up..."
                  pkill -9 -f medicaments-api
                  sleep 2
                  sudo systemctl reset-failed medicaments-api
                fi
              fi
              
            else
              echo "Service is not running"
            fi
            
            # Double-check no processes are left
            if pgrep -f medicaments-api > /dev/null; then
              echo "WARNING: Found lingering processes, cleaning up..."
              pkill -f medicaments-api
              sleep 2
            fi
            
            echo "Service shutdown complete"
          EOF

          
      - name: Copy binary to server
        run: |
          echo "Copying to: ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REPO_DIR }}"
          scp -v medicaments-api ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REPO_DIR }}

      - name: Verify binary was copied
        run: |
          echo "=== Checking if binary exists after copy ==="
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            echo "Contents of ${{ secrets.REPO_DIR }}:"
            ls -la ${{ secrets.REPO_DIR }}
            echo ""
            echo "Specifically looking for medicaments-api:"
            ls -la ${{ secrets.REPO_DIR }}/medicaments-api || echo "BINARY NOT FOUND!"
            echo ""
            echo "File type and permissions:"
            file ${{ secrets.REPO_DIR }}/medicaments-api || echo "Cannot check file type - file missing"
          EOF

      - name: Copy html files
        run: |
          # Copy html directory if it exists
          if [ -d html ]; then
            scp -r html ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REPO_DIR }}/
          fi
          

      - name: Set permissions and restart app
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ${{ secrets.REPO_DIR }}
            chmod +x medicaments-api
            ls -la medicaments-api  # Verify file is there and executable
            ${{ secrets.APP_RESTART }}
          EOF
          
      - name: cleanup
        run: rm -rf ~/.ssh
